---
title: "Lab 1: FPGA and MCU Setup and Testing"
---

## Introduction

This lab aimed to gain familiarity with the FPGA and MCU, and creating a simple seven segment display, as well as controlling some other LED functions.

## Design and Testing Methodology

This lab consisted of two main challenges, creating a blinking light at 2.4 Hz, and a seven segment display illuminating hexadecimal digits as specified by 4 dip switches. 

### Blinking LED

The on-board high-speed oscillator (HSOSC) from the iCE40 UltraPlus primitive library was used to generate a clock signal at 48 MHz. Then, a counter was used to divide the high frequency clock signal down to 2.4 Hz specifically. The most simple clock dividers have a counter that overflows, and this makes it simple to divide the frequency by powers of two. Because 2.4 Hz, does not satisfy that for 48 Mhz, we need to establish the specific number of cycles that it takes take the perfect amount of time.

My design divided the clock frequency to 4.8 Hz, so that the LED would have a 50% duty cycle and a 2.4 Hz overall frequency. I used the equation: n * 1/48,000,000 = 1/4.8. Then, n = 48,000,000/4.8 = 10,000,000. Because the count starts at zero, I will keep increasing the count each cycle until it reaches 9,999,999, and then I will reset it for the next cycle and switch the LED from on to off, or from off to on.

To test this, I connected the LED prong to an oscilloscope, and measured the frequency. The measured frequency was 2.402 Hz, confirming the design's function.

### Seven Segment display

The goal was to use the 4 input DIP switches to control the seven segment display, and ensure that all digits were unique (ex: 6 and b must be distinguishable). The first step was to map each hexadeciaml digit to the seven segment display and determine which panels should be on. Then, this was implemented using a case statement in SystemVerilog which turned the truth table into hardware.

### Testbenches

Both the top level module and the seven segment display module have automatic testbenches to check all possible permutations of input s[3:0], the 4 DIP switches. This simulates the output to make sure that the verilog has the expected functionality in all cases.

### Visual test

The seven segment display and LEDs are also most easily tested through the simple eye test. By going through all 16 combinations of the DIP switches, I can confirm that all hexadecimal digits are shown and distinct, and that the two LEDs that are a function of the swtiches work as correctly, and that the third LED blinks at around 2.4 Hz. Of course, this is a supplement to more rigorous tests, but this is quite effective at detecting bugs that could be common in both the SystemVerilog and the testvectors, because a lot of the cases were copied from one to the other.



## Technical Documentation:

The code for my project can be found on my github page. [Lab1 Github Repository](https://github.com/eoinoconnell04/E155-Lab1)

### Block Diagram

![](images/block_diagram.png)

<figcaption> Figure 1: Block Diagram of the Verilog design.</figcaption>

The block diagram in Figure 1 demonstrates the overall architecture of the design. The top-level module top includes three submodules: the high-speed oscillator block (HSOSC), the clock divider module (divider), and the seven segment display decoder (display).

### Schematic

![](images/schematic.png)

<figcaption> Figure 2: Schematic of the Physical Circuit.</figcaption>

Figure 2 shows the physical layout of the design. Note that led[3:0] have pins that were on the ribbon connector ports so that they could be passed to external LEDs on the breadboard due to a supply shortage of SMT diodes. Each led has a 1k\Omega current-limiting resistor to ensure the output current, ~2.6 mA, does not exceed the maximum current rating for the FPGA GPIO pins.

## Results and Discussion

I accomplished all of the perscribed tasks: the standalone LEDs function as expected and the seven segement display shows all 16 hexadecimal digits, all controlled by the 4 DIP switches. For the 2.4 Hz pulsing LED, my oscilloscope measured 2.402 Hz frequency, but there was quite a bit of noise on the rising and falling edge of the signal. I am not sure if this small error is a measure effect, or perhaps it is comming from the oscillator itself. Regarless, this shows that the clock divider circuit is working as intended, with very minimal error.

### Testbench Simulation

The first testbench is to simulate the top level module. We can see the waveforms match the expected values. Note that for the simulation led[2] is floating because the oscillator is commented out because it cannot be simulated.
Therefore, the expected output is led[1:0] appended in front of seg, giving us a 9 digit expected output.

![](images/lab1_eo_tb.png)

<figcaption> Figure 3: Top level module wave forms.</figcaption>

Not only do we see the wave forms match, but we get a printout that all 16 possible permutations tests passed.

![](images/lab1_eo_tb_tests.png)

<figcaption> Figure 4: Top level module testbench output. </figcaption>


Similarly for simulating the seven segment display module, we give the input switches s, and see the output seg matches the expected values.

![](images/display_tb.png)

<figcaption> Figure 5: Seven segment display module waveforms.</figcaption>


Again, all 16 possible combinations of s matched the expectation.

![](images/display_tb_tests.png)

<figcaption> Figure 6: Seven segment display testbench output.</figcaption>


Note, I did not write a testbench for the clock divider because it would simply be waiting millions of cycles for a single bit to change. However, I did connect an oscilloscope probe to the led on my breadboard and measure the period to be 2.4 Hz. 

## Conclusion

I worked on this lab for three consecutive days, totalling around 12 hours. This included around 3 hours to solder the board and get setup, a few hours working on the demos, before working on the project itself. Writting the verilog only took about 45 minutes, as the idioms are quite simple once you understand the clock divider logic.

The FPGA succesfully controlled both the seven segment display as well as the 3 standalone LEDs. The first two LEDs perform the XOR and AND functions correctly, and the third LED blinks at 2.4 Hz as desired.

## AI Prototype Summary

> **_Prompt:_**  Write SystemVerilog HDL to leverage the internal high speed oscillator in the Lattice UP5K FPGA and blink an LED at 2 Hz. Take full advantage of SystemVerilog syntax, for example, using logic instead of wire and reg.

The code generated by ChatGPT base free model, which I believe to be GPT-5 but the website does not specify for my free acount. The file can be viewed [here](https://github.com/eoinoconnell04/E155-Lab1/blob/main/fpga/src/chat_gpt.sv) on my github.