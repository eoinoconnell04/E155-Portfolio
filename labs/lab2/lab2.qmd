---
title: "Lab 2: Multiplexed 7-Segment Display"
---


## Introduction

This lab aimed to gain familiarity with clock multiplexing and PNP transistors, through driving 2 seven segment displays with a single set of GPIO pins that rapidly switches back and forth at the same frequency as the power driving both displays. This gives the illusion that both are on simultaenously because our eyes cannot detect how fast the displays are switching on and off.

## Design and Testing Methodology

This challenge of this lab was using a single seven segment display module, and a corresponding single set of 7 GPIO pins to control two different seven segment display panels with different numbers. The trick is to rapidly switch the signals on outputed by the pins, and at the same frequency change which display gets power. That gives the illusion that both segements are continuously illuminated, but in reality it is only ever one at a time. This requires some testing to make sure that all the parts work together as intended.

### Seven Segment display

The display module takes a 4 bit signal and decodes it to control the seven segment display, ensuring that all digits were unique (ex: 6 and b must be distinguishable). The first step was to map each hexadeciaml digit to the seven segment display and determine which panels should be on. Then, this was implemented using a case statement in SystemVerilog which turned the truth table into hardware. This module was already tested in lab 1, and comfirmed with a testbench, so we can be sure that this module works as expected.

### Clock divider

Likewise, the clock divider was used in lab 1 as well. The parameter that changes the TOGGLE_COUNT was modified to output a faster frequency than lab 1 so that the human eye cannot detect flickering, but it is otherwise unchagned. Again this has it's own testbench to ensure proper functionality, but we can also use this knowing that it works correctly.

### Top Level module

Simulating the top level module was probably the most challenging aspect of all of lab 2. I changed the TOGGLE_COUNT parameter to flip every cycle (halving the clock frequency), so that the wave forms were more managable. Next, the challenge was getting testvector coverage for all $2^8$ combinations of input switches, and also ensuring that the control signals that turn each one on or off were lined up correctly. To do this, I wrote a python script that generated these test vectors so they didn't have to be hand written. This made it very easy to modify the testvectors as I identified bugs and changed the functionality of the module (it took me a few iterations to get the top level module outputs correct).

This module also tests the mux and adder logic, and this is built into the testvectors.

### Eye test

For this type of project, the simple eye test is very important. Just because the verilog works as expected, we need to make sure that the chosen frequency for switching digits is fast enough to not notice flickering, but slow enough to not see any digits bleeding into each other.

## Technical Documentation:

The code for my project can be found on my github page. [Lab2 Github Repository](https://github.com/eoinoconnell04/E155-Lab2)

### Block Diagram

![](images/block_diagram.png)

<figcaption> Figure 1: Block Diagram of the Verilog design.</figcaption>

The block diagram in Figure 1 demonstrates the overall architecture of the design. The top-level module top includes three submodules: the high-speed oscillator block (HSOSC), the clock divider module (divider), and the seven segment display decoder (display).

It also includes a mux to switch between the two DIP switch input signals, an adder to sum together the input signals, and an inverter to create a set of opposing display control signals (when one is one the other is off and vice versa).

### Schematic

![](images/schematic.png)

<figcaption> Figure 2: Schematic of the Physical Circuit.</figcaption>

Figure 2 shows the physical layout of the design. We have 5 leds on the breadboard controlled by led[4:0], and these have current limiting resistors. The green LEDs that I am using have a voltage drop around 2.2 volts, so the current through the resistor is $V/R = (3.3 - 2) / 330 = 3.9$ mA. This is an acceptable current for the FGPA pins. I used 1k $\Omega$ resistors in lab1 and the LEDs were quite dim so I wanted to to have a brighter LED that was still safe for the FGPA in lab 2.

Additionally, I need resistors for the 7 segment display. In lab 1 I had current limiting resistors, but they were wired incorrectly and were not functioning as intended. Here I fixed that issue, but the calculation is the same from lab 1. The seven segment display has a typical forward voltage of 1.95 V (from datasheet), and given the 3.3 V input, we get $I = V/R = 1.35 / 330 = 4.0$ mA. This is an acceptable current for the FPGA GPIO pins, and the seven segment display has a bright clear ouptut, so this is what was used.

Finally, I need to calculate the resistor for the gate of the PNP transistor. From the data sheet, the Baseâˆ’Emitter Saturation Voltage has a typical value of $0.9$ V. That means the base is sitting at $3.3-0.9 = 2.4$ V. My initial choice was a 2.2 k $\Omega$ resistor, which gives $2.4/2200 = 1.09$ mA through the FPGA pin. This is a perfectly acceptable FPGA current, and the transistor is operating correctly so it is used for this lab.

## Results and Discussion

I accomplished all of the perscribed tasks: the 5 standalone LEDs display the sum of the two hexadecimal digits as expected, and the two digit seven segement display shows both digits with no flickering, with all digits at an even brightness. This is controlled by the 4 dip switches on the board, as well as a secondary set of dip switches on the breadboard. 

### Testbench Simulation

The first testbench is to simulate the top level module. We can see the waveforms match the expected values. For this test, I modified the parameter TOGGLE_COUNT for the divider to make the divided clock only half the frequency of the regular clock. This allows for a much more managable testbench as we do not need to wait thousands of cycles for the divided_clk to flip.

To generate the long test vectors file for the top level module to have complete coverage of all input combinations, I wrote a short python script `generate_lab2_eo_testvectors.py` which loops through all input combinations and appends one cycle with the first digit illuminated, and a second cycle with the second digit, before moving to the next switch combination. This made it very easy to modify the test vectors as I developed the module itself, instead of working on a very large complex testvector file directly.

![](images/lab2_eo_tb.png)

<figcaption> Figure 3: Top level module wave forms.</figcaption>

In figure 3, we see that the expected and simulated waveforms match. Of course, this is only the first couple cycles, but this continuous for all 512 tests. The 512 tests covers all $2^8$ combinations of switches twice, as it includes 2 cycles per combination to allow the mux to select both inputs and flash the number on the respective panel.

![](images/lab2_eo_tb_tests.png)

<figcaption> Figure 4: Top level module testbench output. </figcaption>

Figure 4 output also confirms that the 512 tests matched the expectation, including the LEDs, the seven segment display, and the display selection signals.

![](images/display_tb.png)

<figcaption> Figure 5: Seven segment display module waveforms.</figcaption>

Here, we are using the exact same unmodified display module from lab1, and we have the same test bench to confirm it's functionality. We test for all combinations of s, and ensure that the 7 bit binary output is as expected.

![](images/display_tb_tests.png)

<figcaption> Figure 6: Seven segment display testbench output.</figcaption>

Figure 6 shows that all 16 possible combinations of s matched the expectation.

![](images/divider_test_version_tb.png)

<figcaption> Figure 7: Test version of clock divider module waveforms.</figcaption>

Just like the seven segment display decoder, we are reusing the clock divider as well.

Here we can see that the test verison spends 10 cycles at zero and 10 cycles at one. This divides the frequency by 20. This testbench is much easier to keep track of then trying to simulate the clock divider counting thousands of cycles, yet still provides confirmation that it is working as intended.

![](images/divider_test_version_tb_tests.png)

<figcaption> Figure 8: Test version of clock divider module testbench output.</figcaption>

Figure 8 gives confirmation that the module outputs match the expected values for all tests.



## Conclusion

I found lab 2 significantly easier than lab 1, because I had a gained familiarity with the software and board, and had already assembled my parts. The verilog itself was also very quick, as I was able to reuse my display and divider modules from lab 1. Therefore, I had the verilog and testbenches written in around 2 hours.

It took around 2 more hours to assemble my breadboard, and 2 hours debugging some subtle issues. One such issue was that my verilog assumed a active high reset, wheras the board button is active low. That caused the digit to be stuck on one of them and not oscillate back and forth.

Overall, I worked on this lab for around 12 hours including the writeup and diagrams.

The FPGA succesfully controlled both digits on the seven segment display with no noticable flickering, and the 5 led lights that display the sum. The lab was very succesful and I enjoyed working on it.

I still had issues getting the FPGA programmer to help, but Javier gave me a useful tip which seems to be helping. I might still try out the alternative programmer that has been suggested.

## AI Prototype Summary

> **_Prompt:_**  Write SystemVerilog HDL to time multiplex a single seven segment decoder (that decodes from four bits to a common anode seven segment display) to decode two sets of input bits and drive two sets of seven output bits.

<!--
The code generated by ChatGPT base free model, which I believe to be GPT-5 but the website does not specify for my free acount. The file can be viewed [here](https://github.com/eoinoconnell04/E155-Lab1/blob/main/fpga/src/chat_gpt.sv) on my github.

The first thing I was impressed by was that the AI seemed to get the clock oscillator correct. Here you can see the difference between my code and the AI output from the simple prompt.

AI Clock Generation:

```
HSOSC #(
        .CLKHF_DIV("0b00")   // 48 MHz (00), 24 MHz (01), 12 MHz (10), 6 MHz (11)
    ) hf_osc_inst (
        .CLKHF(clk_hf),
        .CLKHFEN(1'b1),      // enable output
        .CLKHFPU(1'b1)       // power up oscillator
    );
```

My Clock generation (from lab1 source code):
```
HSOSC hf_osc (.CLKHFPU(1'b1), .CLKHFEN(1'b1), .CLKHF(clk));
```

Furthermore, the clock divider function was very simple and similar to what I would have wrote:
```
// Counter divider
    logic [24:0] counter;   // enough bits for ~0.5s interval at 48 MHz
    logic led_reg;

    always_ff @(posedge clk_hf) begin
        counter <= counter + 1;

        // Toggle LED at ~2 Hz (0.5s high, 0.5s low)
        if (counter == 24_000_000) begin
            led_reg <= ~led_reg;
            counter <= 0;
        end
    end
```

For the clock to get down to 2 Hz, my math is that n * 1/48,000,000 = 4 (2 times the clock frequency so that the duty cycle is 50% and the overall frequncy is 2 Hz). This means that it should count 12,000,000 cycles before flipping. The way the AI did it was that the overall frequency is 1 Hz because it spends 0.5s high and 0.5s low, which is 1 Hz as each cycle takes 1 s.

Besides that minor misunderstanding, I was quite impressed by the AI output.

When I synthesized the AI ouput in Radiant, it compiled and synthesized with no errors on the very first try. I think that with slightly more guidance on the clock divider instructions, then this would work as expected.

I was using Cursor extensively over the summer at my internship at Tenstorrent, and I found it extremely powerful because it has context of your other files and you don't need to copy and paste back and forth from a website. I will try to get a student license, but the first half of this course is no AI allowed, so I will only be able to use it on the project.

-->